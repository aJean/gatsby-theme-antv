'use strict';
var __createBinding =
  (this && this.__createBinding) ||
  (Object.create
    ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function () {
            return m[k];
          },
        });
      }
    : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
var __setModuleDefault =
  (this && this.__setModuleDefault) ||
  (Object.create
    ? function (o, v) {
        Object.defineProperty(o, 'default', { enumerable: true, value: v });
      }
    : function (o, v) {
        o['default'] = v;
      });
var __importStar =
  (this && this.__importStar) ||
  function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
  };
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, '__esModule', { value: true });
const lodash_1 = __importDefault(require('lodash'));
const classnames_1 = __importDefault(require('classnames'));
const antd_1 = require('antd');
const react_i18next_1 = require('react-i18next');
const react_1 = __importStar(require('react'));
const icons_1 = __importStar(require('@ant-design/icons'));
const collapse_all_svg_1 = __importDefault(
  require('../images/collapse-all.svg'),
);
const PlayGrounds_module_less_1 = __importDefault(
  require('./PlayGrounds.module.less'),
);
// menu icon
const MenuIcon = icons_1.createFromIconfontCN({
  scriptUrl: '//at.alicdn.com/t/font_470089_9m0keqj54r.js', // generated by iconfont.cn
});
const { SubMenu } = antd_1.Menu;
const PlayGrounds = ({
  getPath,
  currentExample,
  updateCurrentExample,
  treeData,
}) => {
  const { t } = react_i18next_1.useTranslation();
  // 菜单栏展开keys
  const [openKeys, setOpenKeys] = react_1.useState([]);
  const menuRef = react_1.useRef(null);
  // 初始化点击进来的示例按钮a的dom
  const [aRef, setARef] = react_1.useState();
  // input 搜索框的value
  const [searchValue, setSearchValue] = react_1.useState('');
  // 查找符合条件的数据 从title和 searchValue 可以匹配 就返回 否自返回[]
  const findSearchTreeData = (data) =>
    lodash_1.default.reduce(
      data,
      (value, item) => {
        var _a;
        if (
          (_a = item.title) === null || _a === void 0
            ? void 0
            : _a.match(searchValue)
        ) {
          return [...value, item];
        }
        if (item.children) {
          const searchData = findSearchTreeData(item.children);
          return lodash_1.default.size(searchData)
            ? [...value, { ...item, children: searchData }]
            : value;
        }
        return value;
      },
      [],
    );
  // 获取最新的 TreeData 数据
  const getTreeData = () =>
    searchValue ? findSearchTreeData(treeData) : treeData;
  // 控制 菜单栏展开key 保证二级菜单唯一
  const onOpenChange = (keys) => {
    let newKeys = keys;
    const diffKey = lodash_1.default.difference(keys, openKeys)[0];
    if (diffKey && /^secondaryKey-/.test(diffKey)) {
      newKeys = [
        ...newKeys.filter((key) => !/^secondaryKey-/.test(key)),
        diffKey,
      ];
    }
    setOpenKeys(newKeys);
  };
  // 获取默认展开的keys数组 传入treeData 和 底层的 key  返回符合条件的 keys
  const getDefaultOpenKeys = (data, key) =>
    lodash_1.default.reduce(
      data,
      (value, item) => {
        if (item.children) {
          const keys = getDefaultOpenKeys(item.children, key);
          return keys.length ? [...value, item.value, ...keys] : value;
        }
        return key === item.value ? [item.value] : value;
      },
      [],
    );
  // 初始化菜单栏展开keys
  react_1.useEffect(() => {
    const exampleKey = getPath(currentExample);
    setOpenKeys(getDefaultOpenKeys(getTreeData(), exampleKey));
  }, [currentExample]);
  // 初始化滚动到中间
  react_1.useEffect(() => {
    if (aRef) {
      aRef.scrollIntoView({
        block: 'center',
        behavior: 'smooth',
      });
    }
  }, [aRef]);
  // 获取搜索后的文本结构 左文本 + 搜索文本 + 右文本
  const getSearchValueTitle = (title) =>
    searchValue && title.match(searchValue)
      ? react_1.default.createElement(
          react_1.default.Fragment,
          null,
          react_1.default.createElement(
            'span',
            null,
            title.replace(new RegExp(`${searchValue}.*`), ''),
          ),
          react_1.default.createElement(
            'span',
            { className: PlayGrounds_module_less_1.default.searchValue },
            searchValue,
          ),
          react_1.default.createElement(
            'span',
            null,
            title.replace(new RegExp(`.*?${searchValue}`), ''),
          ),
        )
      : title;
  // 图例按钮 + img + tooltip文本
  const example = (item) =>
    react_1.default.createElement(
      antd_1.Tooltip,
      {
        placement: 'right',
        title: getSearchValueTitle(item.title || ''),
        key: item.relativePath,
      },
      react_1.default.createElement(
        'a',
        {
          ref: (dom) => {
            if (dom && !aRef && item.value === getPath(currentExample)) {
              setARef(dom);
            }
          },
          className: classnames_1.default(
            PlayGrounds_module_less_1.default.card,
            {
              [PlayGrounds_module_less_1.default.current]:
                currentExample &&
                item.relativePath === currentExample.relativePath,
            },
          ),
        },
        react_1.default.createElement('div', {
          className: classnames_1.default(
            PlayGrounds_module_less_1.default.screenshot,
          ),
          style: {
            backgroundImage: `url(${
              item.screenshot ||
              'https://gw.alipayobjects.com/os/s/prod/antv/assets/image/screenshot-placeholder-b8e70.png'
            })`,
          },
          title: item.title || item.relativePath,
        }),
      ),
    );
  // 导航栏
  const getMenuSub = (data) =>
    lodash_1.default.map(data, (item) =>
      item.children
        ? react_1.default.createElement(
            SubMenu,
            {
              key: item.value,
              title: react_1.default.createElement(
                'div',
                null,
                item.icon &&
                  react_1.default.createElement(MenuIcon, {
                    className: PlayGrounds_module_less_1.default.menuIcon,
                    type: `icon-${item.icon}`,
                  }),
                react_1.default.createElement(
                  'span',
                  {
                    className: classnames_1.default(
                      PlayGrounds_module_less_1.default.menuTitleContent,
                      PlayGrounds_module_less_1.default.subMenuTitleContent,
                    ),
                  },
                  item.title && getSearchValueTitle(item.title),
                ),
              ),
            },
            getMenuSub(item.children),
          )
        : react_1.default.createElement(
            antd_1.Menu.Item,
            {
              key: item.value,
              style: {
                height: 70,
                padding: 0,
                cursor: 'pointer',
              },
              onClick: () => {
                var _a;
                if (
                  (_a = item.value) === null || _a === void 0
                    ? void 0
                    : _a.match(window.location.pathname)
                ) {
                  window.history.replaceState({}, '', `${item.value}`);
                  updateCurrentExample(item);
                } else {
                  window.location.href = `${window.location.origin}${item.value}`;
                }
              },
            },
            react_1.default.createElement(
              'span',
              { className: PlayGrounds_module_less_1.default.menuTitleContent },
              example(item),
            ),
          ),
    );
  // 搜索栏
  const searchSider = () =>
    react_1.default.createElement(
      'div',
      { className: PlayGrounds_module_less_1.default.searchSider },
      react_1.default.createElement(antd_1.Input, {
        size: 'small',
        placeholder: t('搜索'),
        prefix: react_1.default.createElement(icons_1.SearchOutlined, null),
        value: searchValue,
        onChange: (e) => setSearchValue(e.target.value),
      }),
      react_1.default.createElement(
        antd_1.Tooltip,
        { placement: 'right', title: t('收起所有') },
        react_1.default.createElement(icons_1.default, {
          component: collapse_all_svg_1.default,
          className: PlayGrounds_module_less_1.default.searchSiderIcon,
          onClick: () => setOpenKeys([]),
        }),
      ),
    );
  return react_1.default.createElement(
    'div',
    {
      className: classnames_1.default(
        PlayGrounds_module_less_1.default.shadowWrapper,
      ),
    },
    searchSider(),
    openKeys &&
      react_1.default.createElement(
        antd_1.Menu,
        {
          ref: menuRef,
          mode: 'inline',
          style: { width: '100%' },
          className: PlayGrounds_module_less_1.default.siderbarMenu,
          openKeys: openKeys,
          selectedKeys: [getPath(currentExample)],
          onOpenChange: onOpenChange,
        },
        getMenuSub(getTreeData()),
      ),
  );
};
exports.default = PlayGrounds;
